

				ORG 200
				.bss

SP:		DD 50 DUP ?			; stack



				ORG 500
				.text.0
IN_ROUTINE:							; interrupt routine for input
		


		LOAD R2, I					; index
		JZ R2, END					; if done reading, routine does nothing

		LOAD R3, #1
		SUB R2, R2, R3				; decremnt the index
		STORE R2, I					; save the new index


		LOADUB R1, INPUT_ADDRESS	; read the new char
		
		STOREB R1, [R2+INPUT]		; store the input in reversed order

END:	RET





		ORG 0
		.rodata			; IVT
		DD SP			; Entry 0 - SP
		DD 4 DUP 0		; Entries 1-4
		DD IN_ROUTINE	; Entry 5 - inuput
		DD 26 DUP 0		; rest of entries
		DB 2 DUP ?		; input/output registers


		ORG 800
		.data
I:		DD 10			; size of array and index
INPUT:
		DB 10 DUP ?		; place to store the input




INPUT_ADDRESS DEF 4*32+1	; address of the input register
OUTPUT_ADDRESS DEF 4*32		; address of the output register



				ORG 1000
				.text.1
START:
		LOAD R1, I					; loop until the reading all of the input
		JGZ R1, START

		LOAD R1, #10				; size of the array
		LOAD R2, #0					; index

MORE:	SUB R3, R1, R2
		JZ R3, DONE					; if all elements have been printed, finish the program

		LOADUB R3, [R2+INPUT]		; fetch char
		STOREB R3, OUTPUT_ADDRESS	; print the char

		LOAD R3, #1
		ADD R2, R2, R3				; increment index 

		JMP MORE

DONE:	INT R3						; R3 is 0 at the end

		.end
