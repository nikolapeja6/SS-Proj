assemble started with test2.txt
line is '		.data; pc = 0; new pc = 0
---replace_symbols called. Original core is 'DD 98'
line 'label:	DD 98'
new line 'label: DD 98'
+++replace_symbol finished. New core is 'DD 98'
num 98 is 98; value is 98
line is 'label: DD 98; pc = 0; new pc = 4
---replace_symbols called. Original core is 'DD 99'
line 'l:		DD 99'
new line 'l: DD 99'
+++replace_symbol finished. New core is 'DD 99'
num 99 is 99; value is 99
line is 'l: DD 99; pc = 4; new pc = 8
---replace_symbols called. Original core is 'DD 0xa'
line '		DD 0xa'
new line 'DD 0xa'
+++replace_symbol finished. New core is 'DD 0xa'
num 0xa is 10; value is a
line is 'DD 0xa; pc = 8; new pc = 12
---replace_symbols called. Original core is 'DB 0b0'
line 'zero:	DB 0b0'
new line 'zero: DB 0b0'
+++replace_symbol finished. New core is 'DB 0b0'
num 0b0 is 0; value is 0
line is 'zero: DB 0b0; pc = 12; new pc = 13
---replace_symbols called. Original core is 'OUT DEF 4*32'
line 'OUT DEF 4*32'
new line 'OUT DEF 4*32'
+++replace_symbol finished. New core is 'OUT DEF 4*32'
num 4 is 4; value is 4
num 32 is 32; value is 32
line is 'OUT DEF 4*32; pc = 13; new pc = 13
size of section '.data' is set to 13
---replace_symbols called. Original core is 'ORG 0'
line '	ORG 0'
new line 'ORG 0'
+++replace_symbol finished. New core is 'ORG 0'
*0*
num 0 is 0; value is 0
line is 'ORG 0; pc = 0; new pc = 0
line is '	.rodata; pc = 0; new pc = 0
---replace_symbols called. Original core is 'DD 32 DUP 0'
line '	DD 32 DUP 0'
new line 'DD 32 DUP 0'
+++replace_symbol finished. New core is 'DD 32 DUP 0'
num 32 is 32; value is 32
num 0 is 0; value is 0
line is 'DD 32 DUP 0; pc = 0; new pc = 128
---replace_symbols called. Original core is 'DB 2 DUP 0'
line '	DB 2 DUP 0'
new line 'DB 2 DUP 0'
+++replace_symbol finished. New core is 'DB 2 DUP 0'
num 2 is 2; value is 2
num 0 is 0; value is 0
line is 'DB 2 DUP 0; pc = 128; new pc = 130
size of section '.rodata' is set to 130
line is '		.text; pc = 0; new pc = 0
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument '# 97' is not REGDIR or REGIND, so size is 8B
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is 'START:	LOAD R0, # 97; pc = 0; new pc = 8
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument 'OUT' is not REGDIR or REGIND, so size is 8B
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		STOREB R0, OUT; pc = 8; new pc = 16
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument 'label' is not REGDIR or REGIND, so size is 8B
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		LOAD R1, label; pc = 16; new pc = 24
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument 'OUT' is not REGDIR or REGIND, so size is 8B
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		STOREB R1, OUT; pc = 24; new pc = 32
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument '#l' is not REGDIR or REGIND, so size is 8B
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		LOAD R2, #l; pc = 32; new pc = 40
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - every argument is REGDIR or REGIND, so size is 4B. Instruction is 'LOAD R3, [R2]'
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		LOAD R3, [R2]; pc = 40; new pc = 44
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument 'OUT' is not REGDIR or REGIND, so size is 8B
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		STOREB R3, OUT; pc = 44; new pc = 52
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument '#l' is not REGDIR or REGIND, so size is 8B
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		LOAD R4, #l; pc = 52; new pc = 60
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument '[R4+4]' is not REGDIR or REGIND, so size is 8B
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		LOAD R5, [R4+4]; pc = 60; new pc = 68
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument 'OUT' is not REGDIR or REGIND, so size is 8B
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		STOREB R5, OUT; pc = 68; new pc = 76
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument '$zero' is not REGDIR or REGIND, so size is 8B
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		LOADUB R0, $zero; pc = 76; new pc = 84
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - every argument is REGDIR or REGIND, so size is 4B. Instruction is 'INT R0'
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		INT R0; pc = 84; new pc = 88
size of section '.text' is set to 88
Table after first pass - #TabelaSimbola
SEG 1 .data 1 0x0 0xd RW
SYM 2 label 1 0x0 L
SYM 3 l 1 0x4 L
SYM 4 zero 1 0xc L
SEG 5 .rodata -1 0x0 0x82 R
SEG 6 .text 6 0x0 0x58 X
SYM 7 START 6 0x0 L

Table after global - #TabelaSimbola
SEG 1 .data 1 0x0 0xd RW
SYM 2 label 1 0x0 L
SYM 3 l 1 0x4 L
SYM 4 zero 1 0xc L
SEG 5 .rodata -1 0x0 0x82 R
SEG 6 .text 6 0x0 0x58 X
SYM 7 START 6 0x0 L

line is '		.data; pc = 0; new pc = 0
---replace_symbols called. Original core is 'DD 98'
line 'label:	DD 98'
new line 'label: DD 98'
+++replace_symbol finished. New core is 'DD 98'
num 98 is 98; value is 98
num 98 is 98; value is 98
num 98 is 98; value is 98
l.size = 1
0B from 98 is 98
1B from 98 is 0
2B from 98 is 0
3B from 98 is 0
line is 'label: DD 98; pc = 0; new pc = 4
---replace_symbols called. Original core is 'DD 99'
line 'l:		DD 99'
new line 'l: DD 99'
+++replace_symbol finished. New core is 'DD 99'
num 99 is 99; value is 99
num 99 is 99; value is 99
num 99 is 99; value is 99
l.size = 1
0B from 99 is 99
1B from 99 is 0
2B from 99 is 0
3B from 99 is 0
line is 'l: DD 99; pc = 4; new pc = 8
---replace_symbols called. Original core is 'DD 0xa'
line '		DD 0xa'
new line 'DD 0xa'
+++replace_symbol finished. New core is 'DD 0xa'
num 0xa is 10; value is a
num 0xa is 10; value is a
num 0xa is 10; value is a
l.size = 1
0B from 10 is 10
1B from 10 is 0
2B from 10 is 0
3B from 10 is 0
line is 'DD 0xa; pc = 8; new pc = 12
---replace_symbols called. Original core is 'DB 0b0'
line 'zero:	DB 0b0'
new line 'zero: DB 0b0'
+++replace_symbol finished. New core is 'DB 0b0'
num 0b0 is 0; value is 0
num 0b0 is 0; value is 0
num 0b0 is 0; value is 0
l.size = 1
0B from 0 is 0
line is 'zero: DB 0b0; pc = 12; new pc = 13
line is 'OUT DEF 4*32; pc = 13; new pc = 13
line is '	ORG 0; pc = 13; new pc = 13
line is '	.rodata; pc = 0; new pc = 0
num 32 is 32; value is 32
---replace_symbols called. Original core is 'DD 32 DUP 0'
line '	DD 32 DUP 0'
new line 'DD 32 DUP 0'
+++replace_symbol finished. New core is 'DD 32 DUP 0'
num 32 is 32; value is 32
num 0 is 0; value is 0
num 32 is 32; value is 32
num 0 is 0; value is 0
num 32 is 32; value is 32
num 0 is 0; value is 0
l.size = 32
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
0B from 0 is 0
1B from 0 is 0
2B from 0 is 0
3B from 0 is 0
line is 'DD 32 DUP 0; pc = 0; new pc = 128
num 2 is 2; value is 2
---replace_symbols called. Original core is 'DB 2 DUP 0'
line '	DB 2 DUP 0'
new line 'DB 2 DUP 0'
+++replace_symbol finished. New core is 'DB 2 DUP 0'
num 2 is 2; value is 2
num 0 is 0; value is 0
num 2 is 2; value is 2
num 0 is 0; value is 0
num 2 is 2; value is 2
num 0 is 0; value is 0
l.size = 2
0B from 0 is 0
0B from 0 is 0
line is 'DB 2 DUP 0; pc = 128; new pc = 130
line is '		.text; pc = 0; new pc = 0
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument '# 97' is not REGDIR or REGIND, so size is 8B
instruction code = 16
LOAD, STORE
arg1 = 'R0'
type fot ld_st is ''
num 97 is 97; value is 97
core = LOAD R0, # 97
first = 276824064
second = 97
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is 'START:	LOAD R0, # 97; pc = 0; new pc = 8
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument 'OUT' is not REGDIR or REGIND, so size is 8B
instruction code = 17
LOAD, STORE
arg1 = 'R0'
type fot ld_st is 'B'
replcaing 'OUT'. src = 'OUT' => dst = '128'
num 128 is 128; value is 128
core = STOREB R0, OUT
first = 297795608
second = 128
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		STOREB R0, OUT; pc = 8; new pc = 16
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument 'label' is not REGDIR or REGIND, so size is 8B
instruction code = 16
LOAD, STORE
arg1 = 'R1'
type fot ld_st is ''
replcaing 'label'. src = 'label' => dst = '0'
num 0 is 0; value is 0
core = LOAD R1, label
first = 281083904
second = 0
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		LOAD R1, label; pc = 16; new pc = 24
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument 'OUT' is not REGDIR or REGIND, so size is 8B
instruction code = 17
LOAD, STORE
arg1 = 'R1'
type fot ld_st is 'B'
replcaing 'OUT'. src = 'OUT' => dst = '128'
num 128 is 128; value is 128
core = STOREB R1, OUT
first = 297861144
second = 128
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		STOREB R1, OUT; pc = 24; new pc = 32
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument '#l' is not REGDIR or REGIND, so size is 8B
instruction code = 16
LOAD, STORE
arg1 = 'R2'
type fot ld_st is ''
replcaing 'l'. src = 'l' => dst = '4'
num 4 is 4; value is 4
core = LOAD R2, #l
first = 276955136
second = 4
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		LOAD R2, #l; pc = 32; new pc = 40
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - every argument is REGDIR or REGIND, so size is 4B. Instruction is 'LOAD R3, [R2]'
instruction code = 16
LOAD, STORE
arg1 = 'R3'
type fot ld_st is ''
core = LOAD R3, [R2]
first = 272830464
second = 0
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		LOAD R3, [R2]; pc = 40; new pc = 44
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument 'OUT' is not REGDIR or REGIND, so size is 8B
instruction code = 17
LOAD, STORE
arg1 = 'R3'
type fot ld_st is 'B'
replcaing 'OUT'. src = 'OUT' => dst = '128'
num 128 is 128; value is 128
core = STOREB R3, OUT
first = 297992216
second = 128
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		STOREB R3, OUT; pc = 44; new pc = 52
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument '#l' is not REGDIR or REGIND, so size is 8B
instruction code = 16
LOAD, STORE
arg1 = 'R4'
type fot ld_st is ''
replcaing 'l'. src = 'l' => dst = '4'
num 4 is 4; value is 4
core = LOAD R4, #l
first = 277086208
second = 4
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		LOAD R4, #l; pc = 52; new pc = 60
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument '[R4+4]' is not REGDIR or REGIND, so size is 8B
instruction code = 16
LOAD, STORE
arg1 = 'R5'
type fot ld_st is ''
num 4 is 4; value is 4
core = LOAD R5, [R4+4]
first = 283451392
second = 4
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		LOAD R5, [R4+4]; pc = 60; new pc = 68
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument 'OUT' is not REGDIR or REGIND, so size is 8B
instruction code = 17
LOAD, STORE
arg1 = 'R5'
type fot ld_st is 'B'
replcaing 'OUT'. src = 'OUT' => dst = '128'
num 128 is 128; value is 128
core = STOREB R5, OUT
first = 298123288
second = 128
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		STOREB R5, OUT; pc = 68; new pc = 76
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - argument '$zero' is not REGDIR or REGIND, so size is 8B
instruction code = 16
LOAD, STORE
arg1 = 'R0'
type fot ld_st is 'UB'
replcaing 'zero'. src = 'zero' => dst = '12'
num 12 is 12; value is 12
core = LOADUB R0, $zero
first = 283150360
second = 4294967232
------------current_section index = 6; label_section index = 1
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		LOADUB R0, $zero; pc = 76; new pc = 84
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
get_size_of_instruction - every argument is REGDIR or REGIND, so size is 4B. Instruction is 'INT R0'
instruction code = 0
INT
core = INT R0
first = 0
second = 0
Line does not contain a directive, but get_directive_name was called
^^^OK, not an errror
line is '		INT R0; pc = 84; new pc = 88



***

#TabelaSimbola
SEG 1 .data 1 0x0 0xd RW
SYM 2 label 1 0x0 L
SYM 3 l 1 0x4 L
SYM 4 zero 1 0xc L
SEG 5 .rodata -1 0x0 0x82 R
SEG 6 .text 6 0x0 0x58 X
SYM 7 START 6 0x0 L
#rel.data
.data
0x62 0x00 0x00 0x00 0x63 0x00 0x00 0x00 0x0a 0x00 0x00 0x00 0x00 
#rel.rodata
.rodata
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 
#rel.text
20 A 2
36 A 3
56 A 3
80 R 4
.text
0x00 0x00 0x80 0x10 0x61 0x00 0x00 0x00 0x18 0x00 0xc0 0x11 0x80 0x00 0x00 0x00 
0x00 0x00 0xc1 0x10 0x00 0x00 0x00 0x00 0x18 0x00 0xc1 0x11 0x80 0x00 0x00 0x00 
0x00 0x00 0x82 0x10 0x04 0x00 0x00 0x00 0x00 0x10 0x43 0x10 0x18 0x00 0xc3 0x11 
0x80 0x00 0x00 0x00 0x00 0x00 0x84 0x10 0x04 0x00 0x00 0x00 0x00 0x20 0xe5 0x10 
0x04 0x00 0x00 0x00 0x18 0x00 0xc5 0x11 0x80 0x00 0x00 0x00 0x18 0x88 0xe0 0x10 
0xc0 0xff 0xff 0xff 0x00 0x00 0x00 0x00 
#end
assemble finished
started load
83
83
83
83
83
83
83
next char after relocation table is '46
next_char after content table = '35'
#rel.data

.data
0x62 0x00 0x00 0x00 0x63 0x00 0x00 0x00 0x0a 0x00 0x00 0x00 0x00 
next char after relocation table is '46
next_char after content table = '35'
#rel.rodata

.rodata
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 
next char after relocation table is '46
next_char after content table = '35'
#rel.text
20 A 2
36 A 3
56 A 3
80 R 4

.text
0x00 0x00 0x80 0x10 0x61 0x00 0x00 0x00 0x18 0x00 0xc0 0x11 0x80 0x00 0x00 0x00 
0x00 0x00 0xc1 0x10 0x00 0x00 0x00 0x00 0x18 0x00 0xc1 0x11 0x80 0x00 0x00 0x00 
0x00 0x00 0x82 0x10 0x04 0x00 0x00 0x00 0x00 0x10 0x43 0x10 0x18 0x00 0xc3 0x11 
0x80 0x00 0x00 0x00 0x00 0x00 0x84 0x10 0x04 0x00 0x00 0x00 0x00 0x20 0xe5 0x10 
0x04 0x00 0x00 0x00 0x18 0x00 0xc5 0x11 0x80 0x00 0x00 0x00 0x18 0x88 0xe0 0x10 
0xc0 0xff 0xff 0xff 0x00 0x00 0x00 0x00 
Error reading RelocationTable. First line does not match fpormat '#rel.<section_name>'. Line is '#end'
^^^OK, handeled
finished reading obj file. Read 3sections.
occupance
0 - 130
130 - 143
143 - 231

relocating section '.data'
finishd .data
relocating section '.text'
finishd .text
relocating section '.rodata'
finishd .rodata
#TabelaSimbola
SEG 1 .data 1 0x82 0xd RW
SYM 2 label 1 0x0 L
SYM 3 l 1 0x4 L
SYM 4 zero 1 0xc L
SEG 5 .rodata -1 0x0 0x82 R
SEG 6 .text 6 0x8f 0x58 X
SYM 7 START 6 0x0 L

finished loading
execute started
for out 97
 opcode = 17 type = 3 addrmode 6 mem[800] 4294967295 arg1 128
for out 98
 opcode = 17 type = 3 addrmode 6 mem[800] 4294967295 arg1 128
for out 99
 opcode = 17 type = 3 addrmode 6 mem[800] 4294967295 arg1 128
for out 10
 opcode = 17 type = 3 addrmode 6 mem[800] 4294967295 arg1 128
found INT
INT
execute finished
